name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Run Docker Containers
        run: |
          # Build and run containers using docker-compose
          docker-compose -f docker-compose.yaml build
          docker-compose -f docker-compose.yaml up -d

      - name: Check Containers Status
        run: |
          # Check the status of containers
          docker-compose -f docker-compose.yaml ps

      - name: Run Tests (if applicable)
        run: |
          # If you have tests to run inside the containers, you can run them here
          # For example: docker-compose -f docker-compose.yml exec your-service-name pytest

      - name: Stop Containers (if needed)
        run: |
          # If you need to stop and remove the containers
          docker-compose -f docker-compose.yaml down
  
  sonarQube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    permissions: read-all
    container:
      image: elixir:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install Hex and Rebar
        run: |
          mix local.hex --force || echo "Hex not installed correctly"
          mix local.rebar --force || echo "Rebar not installed correctly"

      - name: Run Elixir analysis on apiTimemanager
        run: |
          # Change to your Elixir app directory
          cd apiTimemanager

          # Install project dependencies
          mix do deps.get, deps.compile || echo "Dependencies not installed correctly"

          # Run Credo for static code analysis
          mix credo --strict || echo "Credo analysis failed"

          # Run SonarQube analysis for Elixir
          echo "Running SonarQube analysis for Elixir..."
          mix do sonarqube || echo "SonarQube analysis failed"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run SonarQube scan on clientTimeManager
        run: |
          cd clientTimeManager && sonar-scanner || echo "SonarQube scan failed"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  mirror:
    name: Push content of the current repo on mirror
    runs-on: ubuntu-latest
    needs: [build, sonarQube]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: git@github.com:EpitechMscProPromo2025/T-POO-700-NAN_9.git
          ssh_private_key: ${{ secrets.SSH_KEY }}
